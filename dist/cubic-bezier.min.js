// CubicBezier Easing v1.0.1 | thednp Â© 2020 | MIT-License
(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a=a||self,a.CubicBezier=b())})(this,function(){'use strict';class a{constructor(a,b,c,d,e){this.cx=3*a,this.bx=3*(c-a)-this.cx,this.ax=1-this.cx-this.bx,this.cy=3*b,this.by=3*(d-b)-this.cy,this.ay=1-this.cy-this.by;let f=a=>this.sampleCurveY(this.solveCurveX(a));return Object.defineProperty(f,"name",{writable:!0}),f.name=e?e:`cubic-bezier(${[a,b,c,d]})`,f}sampleCurveX(a){return((this.ax*a+this.bx)*a+this.cx)*a}sampleCurveY(a){return((this.ay*a+this.by)*a+this.cy)*a}sampleCurveDerivativeX(a){return(3*this.ax*a+2*this.bx)*a+this.cx}solveCurveX(a){var b=Math.abs;let c,d,e,f,g,h,j=1e-5;for(e=a,h=0;32>h;h++){if(f=this.sampleCurveX(e)-a,b(f)<j)return e;if(g=this.sampleCurveDerivativeX(e),b(g)<j)break;e-=f/g}if(c=0,d=1,e=a,e<c)return c;if(e>d)return d;for(;c<d;){if(f=this.sampleCurveX(e),b(f-a)<j)return e;a>f?c=e:d=e,e=.5*(d-c)+c}return e}}return module.exports=a,a});
